-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.


-- Generated by Quartus II 64-Bit Version 13.0 (Build Build 232 06/12/2013)
-- Created on Mon Feb 27 17:18:01 2017

COMPONENT ELEC374
	PORT
	(
		ren0		:	 IN STD_LOGIC;
		ren1		:	 IN STD_LOGIC;
		ren2		:	 IN STD_LOGIC;
		ren3		:	 IN STD_LOGIC;
		ren4		:	 IN STD_LOGIC;
		ren5		:	 IN STD_LOGIC;
		ren6		:	 IN STD_LOGIC;
		ren7		:	 IN STD_LOGIC;
		ren8		:	 IN STD_LOGIC;
		ren9		:	 IN STD_LOGIC;
		renA		:	 IN STD_LOGIC;
		renB		:	 IN STD_LOGIC;
		renC		:	 IN STD_LOGIC;
		renD		:	 IN STD_LOGIC;
		renE		:	 IN STD_LOGIC;
		renF		:	 IN STD_LOGIC;
		clr		:	 IN STD_LOGIC;
		clk		:	 IN STD_LOGIC;
		R0out		:	 IN STD_LOGIC;
		R1out		:	 IN STD_LOGIC;
		R2out		:	 IN STD_LOGIC;
		R3out		:	 IN STD_LOGIC;
		R4out		:	 IN STD_LOGIC;
		R5out		:	 IN STD_LOGIC;
		R6out		:	 IN STD_LOGIC;
		R7out		:	 IN STD_LOGIC;
		R8out		:	 IN STD_LOGIC;
		R9out		:	 IN STD_LOGIC;
		R10out		:	 IN STD_LOGIC;
		R11out		:	 IN STD_LOGIC;
		R12out		:	 IN STD_LOGIC;
		R13out		:	 IN STD_LOGIC;
		R14out		:	 IN STD_LOGIC;
		R15out		:	 IN STD_LOGIC;
		Zhighout		:	 IN STD_LOGIC;
		Zlowout		:	 IN STD_LOGIC;
		InPortout		:	 IN STD_LOGIC;
		HIin		:	 IN STD_LOGIC;
		PCin		:	 IN STD_LOGIC;
		Zin		:	 IN STD_LOGIC;
		Zhighin		:	 IN STD_LOGIC;
		LOin		:	 IN STD_LOGIC;
		Empty		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		Read		:	 IN STD_LOGIC;
		MDRin		:	 IN STD_LOGIC;
		Mdatain		:	 IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		HIoutEn		:	 IN STD_LOGIC;
		LOoutEn		:	 IN STD_LOGIC;
		PCoutEn		:	 IN STD_LOGIC;
		MDRoutEn		:	 IN STD_LOGIC;
		CoutEn		:	 IN STD_LOGIC;
		reny		:	 IN STD_LOGIC;
		operation		:	 IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		renz		:	 IN STD_LOGIC;
		rout2		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		rout3		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		rout4		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		rout5		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		rout6		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		rout7		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		rout8		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		rout9		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		routa		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		routb		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		routc		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		routd		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		route		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		routf		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		rout0		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		rout1		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		busmuxout		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		PCout		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		Zhigh		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		LOout		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		HIout		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		MDRout		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		rh		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
		rlow		:	 INOUT STD_LOGIC_VECTOR(31 DOWNTO 0)
	);
END COMPONENT;